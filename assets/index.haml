!!!
%html
  %head
    %title JSpec - JavaScript Testing Framework
    %link{ :rel => 'stylesheet', :href => 'style.css' }
    %link{ :rel => 'stylesheet', :href => 'lightr.css' }
    %script{ :src => 'javascripts/jquery.js' }
    %script{ :src => 'javascripts/app.js' }
  %body
    %a{ :href => PROJECT_URL }
      %img#ribbon{ :src => 'http://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png', :alt => 'Fork me on GitHub' }

  #container
    #download
      %a{ :href => PROJECT_URL + '/downloads' }
        %img{ :src => 'http://github.com/images/modules/download/zip.png' }
      %a{ :href => PROJECT_URL + '/downloads'  }
        %img{ :src => 'http://github.com/images/modules/download/tar.png' }
    
    = title 'JSpec', 'JavaScript Testing Framework'

    %p
      JSpec is a extremely small, yet very powerful testing framework. Utilizing its own custom grammar and
      pre-processor, JSpec can operate in ways that no other JavaScript testing framework can. This includes
      many helpful shorthand literals, a very intuitive / readable syntax, as well as not polluting core
      object prototypes.

    %p
      JSpec can also be run suites in a variety of ways, such as via the terminal with Rhino support, via browsers
      using the DOM or Console formatters, or finally by using the Ruby JavaScript server which
      runs browsers in the background, reporting back to the terminal.

    %div#features
      %h2 Features
      
      %ul
        %li Allows parens to be optional when using matchers to increase readability
        %li Assertion graphs displaying how many, and which assertions passed or failed
        %li Async support
        %li Rhino support
        %li Env.js support
        %li Mock Ajax
        %li Fixture support
        %li Modular extensibility via Modules and hooks.
        %li Cascading before/after/before_each/after_each hooks
        %li Default / customizable evaluation contexts
        %li Does not pollute core object prototypes or global scope
        %li DOM sandbox support
        %li Extremely simple and intuitive matcher declaration
        %li Framework / DOM independent
        %li Grammar-less option (for those who dislike JSpec's syntax)
        %li Great looking default DOM theme
        %li Highly readable custom grammar
        %li Nested describes
        %li Optionally display failures only, speeding up development
        %li Over 45 core matchers
        %li Proxy assertion or 'spy' support
        %li Method Stubbing
        %li Interactive Rhino shell support
        %li Growl support
        %li Ruby JavaScript testing server
        %li Several helpful formatters (dom, console, terminal, ...)
        %li Shared behaviors
        %li Ruby on Rails Integration
        %li Tiny (15 kb compressed, 1600-ish LOC)
        %li `jspec` command-line utility for auto-running specs, and initializing project templates
        %li Executable supports installing of common support libraries such as Rhino, Envjs, jQuery, and more

    %div#cheatsheets
      %a{ :href => '#', :name => 'cheatsheets' }
      %h2 Cheat Sheet
      %p 
        Using the
        %a{ :href => 'http://github.com/visionmedia/ch' } bash cheat sheet library
        you can get quick terminal access to JSpec's cheat sheet and hundreds more.
      %pre.small cd /tmp && git clone git://github.com/visionmedia/ch.git && cd ch && sudo make install
      %pre.small ch jspec
      

    %div#screencasts
      %a{ :href => '#', :name => 'screencasts' }
      %h2 Screencasts
      %ul
        %li
          %a{ :href => 'http://content.screencast.com/users/tjholowaychuk/folders/Jing/media/816a8baa-0175-491a-a138-c889fff99f2d/00000077.swf' } JSpec Introduction:
          Learn how to set up your own JSpec project and get testing. 
        %li
          %a{ :href => 'http://content.screencast.com/users/tjholowaychuk/folders/Jing/media/cef7b41f-976e-4841-b37f-c4d2f6e37639/00000078.swf' } Hooks:
          Clean up suites using JSpec's cascading before/after hooks
        %li
          %a{ :href => 'http://content.screencast.com/users/tjholowaychuk/folders/Jing/media/488587de-1d82-4bdf-8880-4247a358fdec/00000079.swf' } Running Suites:
          Run JSpec suites using the DOM, Rhino, Ruby server and more.
        %li
          %a{ :href => 'http://content.screencast.com/users/tjholowaychuk/folders/Jing/media/3532baed-e21a-4ce3-a5e9-fa1f5f447621/00000080.swf' } Grammar:
          Learn about JSpec's custom grammar or 'DSL', how it works and what it provides.
        %li
          %a{ :href => 'http://content.screencast.com/users/tjholowaychuk/folders/Jing/media/17a10faf-5bc3-42ff-81bb-edb111c8261a/00000081.swf' } Fixtures / DOM Testing:
          Cleanly test DOM elements using fixtures and jQuery.

    %div#example
      %h2 Example
      %code.highlight= highlight example('basic')
      
      %h2 Example Without Grammar
      %code.highlight= highlight example('basic-grammarless')
      
      %h2 DOM Formatter
      %p The DOM formatter is the default of JSpec, featuring assertion graphs and a sleek white style.
      %img{ :src => 'http://img396.imageshack.us/img396/8868/jspecdom.png', :alt => 'JSpec DOM Formatter', :class => 'rounded' }

    %div#matchers
      %h2 Matchers
      
      %pre#matcher-example Click a matcher below to view an example
      
      %div.left
        %h3 Core
        %ul.matchers
          %li be
          %li eql
          %li equal          
          %li be_a    
          %li be_an    
          %li be_an_instance_of
          %li be_at_least    
          %li be_at_most     
          %li be_within      
          %li be_null        
          %li be_undefined 
          %li be_empty       
          %li be_true        
          %li be_false       
          %li be_type        
          %li be_greater_than
          %li be_less_than   
          %li have           
          %li have_at_least  
          %li have_at_most   
          %li have_within    
          %li have_length  
          %li have_prop
          %li have_property  
          %li include        
          %li match
          %li throw_error
          %li respond_to     

      %div.right
        %h3 jQuery
        %ul.matchers
          %li have_tag      
          %li have_one      
          %li have_tags 
          %li have_many 
          %li have_child           
          %li have_children        
          %li have_text            
          %li have_attr            
          %li have_value     
          %li have_class
          %li have_classes
          %li be_visible
          %li be_hidden
          %li be_enabled
          %li be_disabled
          %li be_selected
          %li be_checked
          %li have_type
          %li have_id
          %li have_title
          %li have_alt
          %li have_href
          %li have_src
          %li have_rel
          %li have_rev
          %li have_name
          %li have_target
      
      %div.clear

    %h2 JSpec Executable
    %p The packaged JSpec executable allows you to quickly initialize project templates which utilize JSpec, update them with the lateast versions of JSpec, as well as auto-run suites in multiple browsers when a file is altered. For information beyond the examples below consult `jspec help`.

    %pre.small= example('jspec-init')
    %pre.small= example('jspec-update')
    %pre.small= example('jspec-bind')
    
    %h2 Options
    %p The follow options may be passed to JSpec.run()
    %ul
      %li
        %strong fixturePath:
        a string pointing to the fixture directory (required for fixtures)
      %li
        %strong failuresOnly:
        whether or not to display failing specs only
      %li 
        %strong reportToId:
        an element id for the DOM report to output to, defaults to 'jspec'
      %li 
        %strong verbose:
        verbose server output, defaults to false
        
    %h2 Growl Support
    %p
      JSpec uses the
      %a{ :href => 'http://github.com/visionmedia/js-growl' } JavaScript Growl
      library to provide growl support when using Rhino for testing. Simply
      %em load()
      jspec.growl.js within spec/rhino.js

    %h2 Proxy Assertions or 'Spies'
    %p JSpec's support for proxy assertions allows you to assert that a method is invoked a specific number of times, with specific arguments, returning specific results. In the example below, we assert that <strong>getDogs()</strong> calls <strong>getPets()</strong> with a string of <strong>'dogs'</strong>, and returns an array of dogs. All these assertions must pass in order for the spec to pass.

    %pre.small= example('receive')

    %p The example below will fail, due to the method being called only once with a string.

    %pre.small= example('receive-fail')
    
    %h2 Fixtures
    %p JSpec's fixture support is simple, yet elegant and powerful. The fixture() utility works for both Rhino, Node and browsers alike. Paths are resolved as follows: 
    
    %p fixture('FILE') 
    %ul
      %li fixturePath/FILE
      %li fixturePath/FILE.html
      
    %p This means that if you have an html fixture located at 'spec/fixtures/foo.html' you may simply call fixture('foo'), likewise when using other extensions you may simply use fixture('foo.json'). When fixtures reside in different directories this may be specified as well fixture('data/foo.html'), fixture('html/foo.html'), etc.
    
    %h2 JSON Fixtures
    
    %p The json_fixture() utility works much like fixture() however will parse JSON, and is resolved as:
    %ul
      %li fixturePath/FILE
      %li fixturePath/FILE.json
    
    %h2 Method Stubbing
    %p
      JSpec provides the
      %em stub()
      function in order to alter a method for the duration of a specification (it block).
      
    %pre.small stub(person, 'toString').and_return('Ive been stubbed!') 
    
    %p 
      After a spec has run, JSpec uses
      %em destub()
      to remove a specific stubbed method.
    
    %pre.small destub(person, 'toString')
    
    %p At any time we could destub all stubbed methods for an object
    
    %pre.small destub(person)
    
    %p Alternatively those using the JSpec grammar may use the psuedo methods
    
    %pre.small person.stub('age').and_return(22)
    
    %p Which is then converted to the regular function calls we saw above.
    
    %h2 DOM Testing With jQuery
    %p When using jQuery it is extremely simple to test how your library interacts with a mock DOM. As you can see below there is no need to add arbitrary elements to your suite HTML, jQuery's constructor will generate the elements from a string or fixture.
    %pre.small= example('dom')
    %p 
      Click to see an example spec suite from the
      %a{ :href => 'http://gist.github.com/147831' } jQuery.inline-search.js plugin
    
    %h2 Mock Ajax Requests
    %p jspec.xhr.js provides the mock_request() and unmock_request() utilities. unmock_request() is automatically called after each spec, so it is usually not called manually. unmock_request() simply restores the original XMLHttpRequest object. mock_request() is framework agnostic, however below it is shown in use with jQuery:
    
    %pre.small= example('xhr-jquery')
    
    %h2 Async Support With Mock Timers
    
    %p 
      The JavaScript mock timer library 
      %a{ :href => 'http://github.com/visionmedia/js-mock-timers' } http://github.com/visionmedia/js-mock-timers
      is bundled with JSpec and is located at 'lib/jspec.timers.js'.
      
    %p Timers return ids as expected, which may be terminated when passed to clearInterval() however mock timers
    require manual scheduling and progression via the tick() function.
    
    %pre.small= example('timers-timeout')
    
    %p When using setInterval(), providing a large millisecond increment to tick() all callbacks which have not had a change to 'catch up' may be called several times as conveyed in the example below.
    
    %pre.small= example('timers-interval')
    
    %p Finally a practical example:
    
    %pre.small= example('timers')
    
    %h2 Extending JSpec With Modules
    %p JSpec's Modules take the form of a simple JavaScript object or 'hash', allowing you to add matchers
    define dependencies, add utility functions, implement hook callbacks and more. Below is an example module
    taken from core to add jQuery support. Consult the README for additional information.
    
    %pre.small= example('module-jquery', true)
    
    %h2 Module Hooks
    %p Hooks are called throughout JSpec's execution to provide modles with a chance to alter, or act upon 
    what is currently being processed. For example to add range support to JSpec we can simply implement a 
    hook callback for the 'preprocessing' hook:
    
    %p This implementation would allow '0..5' to be expanded to '[0,1,2,3,4,5]'
    %pre.small= example('module-hook-preprocessing')
    
    %h2 Grammar Rules
    %p Below are the conversions made when utilizing the JSpec grammar, literal JavaScript is un-touched.
    
    %h3 Assertions
    %p An assertion without parens
    %pre.small 'foobar'.should.include 'bar'
    
    %p Is converted to include parens
    %pre.small 'foobar'.should.include('bar')
    
    %p Which is then converted to a literal grammar-less JSpec assertion.
    %pre.small expect('foobar').to(include, 'bar')
    
    %h3 Function Literal
    %p The following are equivalent
    %pre.small -{ throw 'test' }.should.throw_error
    %pre.small function(){ throw 'test' }.should.throw_error
    
    %h3 Range Literal
    %p Below is the inclusive range literal
    %pre.small 1..5
    
    %p Which expands to
    %pre.small [1,2,3,4,5]
    
    %p May be used to create descriptive matchers
    %pre.small n.should.be_within 5..9
    
    %h3 __END__ Token
    %p Any text placed after the __END__ token is considered irrelevant and is striped out before evaluation. This is sometimes useful for document or code reference while writing specs.
    
    %p For example when writting regression specs it is sometimes useful to paste the issue ticket's comment(s) below this area for reference.
    %pre.small= example('__END__')
    
    %h2 Extending the jspec executable
    %p Both project specific and user specific sub-commands may be used to extend those already provided by jspec. For example add the following to spec/commands/example_commands.rb which is then loaded when jspec is executed. Or place it in ~/jspec/commands
    %pre.small= example('command')
    
    %div#more-information
      %h2 More Information
      
      %ul
        %li
          Google Group
          %a{ :href => 'http://groups.google.com/group/jspec' } http://groups.google.com/group/jspec
        %li 
          IRC Channel 
          %a{ :href => 'irc://irc.freenode.net#jspec' } irc://irc.freenode.net#jspec
          
        %li
          Get the
          %a{ :href => 'http://github.com/visionmedia/jspec.tmbundle/tree/master' } TextMate bundle
      
        %li 
          View the
          %a{ :href => PROJECT_URL } Readme
          for more documentation

        %li
          %a{ :href => 'rails.html' } Rails / JSpec Integration
          
        %li
          %a{ :href => 'https://github.com/visionmedia/jspec-drupal' } Drupal / JSpec Integration
          
        %li
          %a{ :href => 'http://www.jsmag.com/main.issues.description/id=21/' } Featured JSpec Article in JSMag
        
        %li
          %a{ :href => 'http://github.com/thatcher/env-js' } Env.js
        
        %li
          %a{ :href => 'http://github.com/tobiassvn/snipmate-jspec/' } JSpec Vim Snippits

    %h2 Authors

    %p 
      TJ Holowaychuk 
      %a{ :href => 'http://vision-media.ca' } (tj@vision-media.ca)

    .footer
      this mini site brought to you by : 
      %a{ :href => project_url('visionmedia', 'mini') } visionmedia/mini